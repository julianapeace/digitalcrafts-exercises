//////////////////////////
STORING PASSWORDS NOTES
//////////////////////////

what we are going to learn today is the best practice today. but 6 months from now when a hacker figures it out, it will upgrate. And upgrades happen quickly. Even if we get it right, changes are it will change. So we will learn how ot works but not necessarily want to do in our everyday job. A lot of libraries have teams keeping up with hacks, so we just have to rmremeber to update our library. (e.g. passport library)

NEVER STORE PASSWORDS IN PLAIN TEXT
even if you have the most secure db. Prepare for the fact that someone might break in. Need to have layers of security.

sounds like common sense, but a lot of developers still dont use these practices.

//////////////////////////
Password Hashing
//////////////////////////

npm install pbkdf2

npm install crypto

1. get pw
2. hash it
3. 1 way hash, cannot undo.
4. check hash against our hash. **so developers don't know anyones passwords.

var pbkdf2 = require('pbkdf2');
var crytpo = require('crypto');
var salt = crypto.randomBytes(20).toString('hex');
var password = 'some-password';
var key = pbkdf2.pbkdf2Sync(
  password, salt, 36000, 256, 'sha256' //takes the password, adds the salt, does 36000 iterations of encryyptions. The more iteration, the stronger the password. If we bump it up, it will take longer but it's one place we want it to be slow. (when we check passwords, we have to do the same number of iterations.) we can even use SHA512. the bigger the number, the biggeer the hash result.
);
var hash = key.toString('hex');

pbkdf2 is the current strongest way to hash passwords. (created from a hackathon) md5 was the old way to hash passwords. SHA1 was the one after, SHA256 is even stronger. pbkd4f is built using SHA256. How did pual figure it out? he went to django and passport, went thru documentation
learned the best one.

var stored_pass = `pbkdf2_sha256$36000$${salt}$${hash}`;
// checking a password
var pass_parts = stored_pass.split('$');
var key = pbkdf2.pbkdf2Sync(
  'some-password',
  pass_parts[2],
  parseInt(pass_parts[1]),
  256, 'sha256'
);
var hash = key.toString('hex');
if (hash === pass_parts[3]) {
  console.log('Passwords Matched!');
}

CHECK PASSWORD
check passwords by passing it through the same iterations it went through.

SALT
adds a random string to the password that is unique to each user. You save the salt in your salt db exactly the way it is.
you can add more salts.
you can add 2 factor authentication.

PAUL MADE THIS HELPER FOR US IF WE DON'T WANT TO. a lot of ppl in node use bcrypt which is good too. He wanted his students to use PBK so he created this helper for his last class.

npm install pbkdf2-helpers

https://www.npmjs.com/package/pbkdf2-helpers

DJANGO has a cool way to log you in. If one algorithm fails, it will force you to reset your pw so you cant use it anymore.Django has a list of acceptable hashes, if it gets broken they'll remove it from the list. Will send you an email to change your app. You probably want to send an email out to your users to reset pw. Django will force you to keep updated.
